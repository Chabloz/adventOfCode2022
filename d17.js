const input = ``;

function spawnPieceInGrid(grid, piece, spawnRow, spawnCol) {
  const pieceHeight = piece.length;
  const pieceWidth = piece[0].length;
  for (let row = spawnRow; row < spawnRow + pieceHeight; row++) {
    for (let col = spawnCol; col < spawnCol + pieceWidth; col++) {
      grid[row][col] = piece[row - spawnRow][col - spawnCol];
    }
  }
}

function canPieceMoveLeftOrRight(grid, dir) {
  for (let row = 0; row < grid.length; row++) {
    for (let col = 0 ; col < grid[0].length ; col++) {
      if (grid[row][col] != piece) continue;
      const nextCol = col + dir;
      if (nextCol < 0 || nextCol >= grid[0].length || grid[row][nextCol] == rock ) return false;
    }
  }
  return true;
}

function canPieceMoveDown(grid) {
  for (let row = 0; row < grid.length; row++) {
    for (let col = 0 ; col < grid[0].length ; col++) {
      if (grid[row][col] != piece) continue;
      const nextRow = row - 1;
      if (nextRow < 0 || grid[nextRow][col] == rock ) return false;
    }
  }
  return true;
}

function movePieceLeftOrRight(grid, dir) {
  if (!canPieceMoveLeftOrRight(grid, dir)) return;
  let col;
  const startCol = dir === left ? 0 : grid[0].length - 1;
  const testEndCol = () => dir === left ? col < grid[0].length : col >= 0;
  const updCol = () => dir === left ? col++ : col--;
  for (let row = 0; row < grid.length; row++) {
    for (col = startCol ; testEndCol() ; updCol()) {
      if (grid[row][col] != piece) continue;
      const nextCol = col + dir;
      grid[row][col] = air;
      grid[row][nextCol] = piece;
    }
  }
}

function movePieceDown(grid) {
  if (!canPieceMoveDown(grid)) return false;
  for (let row = 0; row < grid.length; row++) {
    for (let col = 0 ; col < grid[0].length ; col++) {
      if (grid[row][col] != piece) continue;
      const nextRow = row - 1;
      grid[row][col] = air;
      grid[nextRow][col] = piece;
    }
  }
  return true;
}

function transformPieceIntoRock(grid) {
  for (let row = 0; row < grid.length; row++) {
    for (let col = 0 ; col < grid[0].length ; col++) {
      if (grid[row][col] != piece) continue;
      grid[row][col] = rock;
    }
  }
}

function getHigherRock(grid) {
  for (let row = grid.length - 1; row >=0 ; row--) {
    for (let col = 0 ; col < grid[0].length ; col++) {
      if (grid[row][col] == rock) return row;
    }
  }
  return 0;
}

function hashTopGrid(grid, rockHeight) {
  const columnsRocksPos = Array(grid[0].length).fill( rockHeight + 1);
  for (let row = rockHeight; row >= 0 ; row--) {
    for (let col = 0 ; col < grid[0].length ; col++) {
      if (columnsRocksPos[col] !=  rockHeight + 1) continue;
      if (grid[row][col] == rock) {
        columnsRocksPos[col] = rockHeight - row;
      }
    }
  }
  return columnsRocksPos.join(':');
}

const rock = Symbol('#');
const air =  Symbol('.');
const piece =  Symbol('@');
const left = -1;
const right = +1;

const directions = [...input].map((move) => (move === '>' ?  right : left));

const pieces =  [
  [
    [piece, piece, piece, piece], // ####
  ],
  [
    [air  , piece, air  ],  // .#.
    [piece, piece, piece],  // ###
    [air  , piece, air  ],  // .#.
  ],
  [
    [piece, piece, piece],  // ###
    [air  , air  , piece],  // ..#
    [air  , air  , piece],  // ..#
  ],
  [
    [piece], // #
    [piece], // #
    [piece], // #
    [piece], // #
  ],
  [
    [piece, piece],  // ##
    [piece, piece],  // ##
  ],
];

// I was going to make an animated version, so i've simulated the whole grid !
// and i've made no optimization, so it's really slow !!!
let nbRocksToFalls = 20000;
const totalHeightOfPieces = pieces.reduce((acc, piece) => acc + piece.length, 0);
const maxPossibleRows = Math.ceil((nbRocksToFalls / pieces.length) * totalHeightOfPieces);
const maxPossibleCols = 7;
const grid = Array.from({length: maxPossibleRows}, () => Array(maxPossibleCols).fill(air));

let spawnRow = 3;
const spawnCol = 2;
let directionsIndex = 0;
// For part 2
const scoreHeight = new Map();
let backupHeight = 0;
let totalHeight = 0;

for (let indRock = 0; indRock < nbRocksToFalls; indRock++) {
  spawnPieceInGrid(grid, pieces[indRock % pieces.length], spawnRow, spawnCol);

  // Wind effect, and move the pieces down until they can't move anymore
  do {
    const dir = directions[directionsIndex % directions.length];
    movePieceLeftOrRight(grid, dir);
    directionsIndex++;
  } while (movePieceDown(grid));

  transformPieceIntoRock(grid);

  // very non optimal way to get the high of the grid
  const rockHeight = getHigherRock(grid);

  // Compare the top of the grid with the previous ones to find a cycle
  const key = hashTopGrid(grid, rockHeight);
  if (scoreHeight.has(key) && scoreHeight.get(key).indRock === indRock / 2) {
    // Found a cycle: so we can skip a lot of rocks !
    simulateALotOfCycles(key, rockHeight, indRock);
  }

  scoreHeight.set(key, {rockHeight, indRock});
  spawnRow =  rockHeight + 4;
  // part 1
  if (indRock == 2021) console.log(rockHeight + 1);
}

//part 2
function simulateALotOfCycles(key, rockHeight, indRock) {
  const oldCycle = scoreHeight.get(key);
  const remainder = 1000000000000 % oldCycle.indRock;
  const multiple = (1000000000000 - remainder - oldCycle.indRock) / oldCycle.indRock;
  totalHeight = multiple * (rockHeight - oldCycle.rockHeight) + oldCycle.rockHeight;
  backupHeight = rockHeight;
  // let the remaining rocks fall
  nbRocksToFalls = indRock + remainder;
}

console.log(totalHeight + getHigherRock(grid) - backupHeight + 1);